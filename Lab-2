import numpy as np
import pandas as pd
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, confusion_matrix

class SingleLayerPerceptron:
    def __init__(self, learning_rate=0.01, n_iter=100):
        self.learning_rate = learning_rate
        self.n_iter = n_iter
        self.weights = None
        self.bias = None

    def fit(self, X, y):
        n_samples, n_features = X.shape
        self.weights = np.zeros(n_features)
        self.bias = 0

        for _ in range(self.n_iter):
            for idx, x_i in enumerate(X):
                linear_output = np.dot(x_i, self.weights) + self.bias
                y_predicted = self._activation_function(linear_output)               
                update = self.learning_rate * (y[idx] - y_predicted)
                self.weights += update * x_i
                self.bias += update

    def predict(self, X):
        linear_output = np.dot(X, self.weights) + self.bias
        y_predicted = self._activation_function(linear_output)
        return np.where(y_predicted >= 0.5, 1, 0)

    def _activation_function(self, x):
        x = np.clip(x, -500, 500)
        return 1 / (1 + np.exp(-x))

df = pd.read_csv('diabetes.csv')
data = df.head(10)   
X = data.iloc[:, :-1].values 
y = data.iloc[:, -1].values

perceptron = SingleLayerPerceptron(learning_rate=0.1, n_iter=100)
perceptron.fit(X, y)

predictions = perceptron.predict(X)

accuracy = accuracy_score(y, predictions)
#precision = precision_score(y, predictions)
#recall = recall_score(y, predictions)
f1 = f1_score(y, predictions)
#confusion = confusion_matrix(y, predictions)

print("Predictions:", predictions)
print("Accuracy:", accuracy)
print("F1 Score:", f1)

